<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=100%,height=100%, maximum-scale=1.0" />
  <link rel="shortcut icon" type="image/png" href="/img/icons8-study-64.png" />
  <link rel="stylesheet" type="text/css" href="/css/degree-structure-page.css" /> <!-- use absolute path with '/' at first -->
  <link rel="stylesheet" type="text/css" href="/css/styleguide-dsp.css" />
  <link rel="stylesheet" type="text/css" href="/css/globals-dsp.css" />
  <title>degree-structure</title>
</head>

<body style="margin: 0; background: #e8f0f2">
  <input type="hidden" id="anPageName" name="page" value="degree-structure-page" />
  <div class="degree-structure-page screen">
    <div class="app-top">
      <a href="/">
        <div class="curriculum-helper valign-text-middle blinker-semi-bold-aqua-squeeze-24px">Curriculum Helper</div>
      </a>
      
    </div>
    <div class="degree-name" id="degree-section">
      <h1 class="title"><% DegreeName = "DegreeName" %> <%= DegreeName%></h1>
    </div>
    
    

    <script>

      function addStream(stream) {
        
        let stream_name = 0; // This is hardcode, should delete later

        /* Create a section title, e.g., core, elective, project, major */
        let sectionTitle = `
        <div class="title-row">
          <img class="vector" src="../img/vector@2x.png" />
          <div class="core-courses blinker-semi-bold-storm-gray-20px">${stream_name || "stream name"}</div>
        </div>`;

        /* Create all course cards under this stream */
        let sectionCards = addCards(); // This is hardcode, should pass in a stream object

        let section = `
        <div class="core"> 
          ${sectionTitle} 
          <div class="course-card-row"> 
            ${sectionCards} 
          </div> 
        </div>`;
        
        /* Append the whole section to html at a right place */
        const degreeSection = document.querySelector("#degree-section");
        degreeSection.insertAdjacentHTML("afterend", section);

        // document.getElementById("screen").append(...section) ;
      }

      /* 
        This function will create all courses card under a stream, 
        Parameter:a stream obj that contains mutilple course objs 
      */
      function addCards(streamCourses) {
        
        let sectionCards = "";
        let len = 9 || streamCourses.length; // This is hardcode, should use only "streamCourse.length"
        for (i=0; i<len; i++) {
          sectionCards += createCard(); // Should pass in a course obj contains info of pre-req, incomp, belongs etc, .
        }
        return sectionCards;
        
      }

      /* 
        This function will create a single course card, 
        Parameter:a course obj that contains information of pre-req, incomp, belongs etc,
      */
      function createCard(course) {
        
        // This line is hardcode, should delete later
        let course_subject_and_course_code, course_name, first_belongs_to, second_belongs_to, pre_requisite, incompatible, course_url = 0; 
        
        let card = `
        <a href="../course-relationships/${course_name || "course-name"}">
          <div class="taskcourse-card">
            <div class="taskcard border-1px-gallery">
              <div class="main-info">
                <div class="comp-sci-3001 blinker-normal-fiord-12px">${course_subject_and_course_code || "Course Subject & Code"}</div>
                <div class="computer-networks-applications blinker-bold-fiord-16px">
                    ${course_name || "course name"}
                </div>
              </div>
              <div class="divider"></div>
              <div class="rest-info">
                <div class="belongs-to">
                  <div class="belongs-to-1 blinker-bold-cyprus-11px">Belongs to:</div>
                  <div class="column">
                    <div class="first">
                      <div class="degree">
                        <p class="low blinker-semi-bold-moonstone-10px">${first_belongs_to||"B - Computer Science - Elective"}</p>
                      </div>
                    </div>
                    <div class="second">
                      <div class="degree-1">
                        <p class="low-1 blinker-semi-bold-moonstone-10px">
                          ${second_belongs_to||"B - Information Technology - Cybersecurity - Core"}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="prerequisites">
                  <div class="prerequisites-1 blinker-bold-cyprus-11px">Prerequisites:</div>
                  <p class="course-name-number blinker-bold-cyprus-10px">
                    ${pre_requisite||"Plain text"}
                  </p>
                </div>
                <div class="incompatible">
                  <div class="incompatible-1 blinker-bold-cyprus-11px">Incompatible:</div>
                  <div class="course-name-num blinker-bold-cyprus-10px">${incompatible||"Plain text"}</div>
                </div>
              </div>
            </div>
          </div>
        </a>`;
        return card;
      }
    
      /* 
        This function will create the whole degree structure
        Parameter: a degree obj contains multiple streams
      */
      function createStructure(degree) {

        let flag = true;
        let section = "";

        for (k=0; k < (5||degree.length); k++){ //This is hardcode, i<degree.length
          
          if (k == 3 && (1 || degree.stream.stream_name.includes("major")) && flag) {
            let majorSection = `
              <div class="majors">
                <div class="majors-1">Majors</div>
              </div>`;
              /* Append the whole section to html at a right place */
              const degreeSection = document.querySelector("#degree-section");
              degreeSection.insertAdjacentHTML("afterend", majorSection);
              
              flag = false;
          }
          
          addStream(); // Should pass in a stream object
        }
      }

      /* Pass in degree obj by ejs */
      createStructure();

      /* Use fetch to request data instead of using ejs */
      fetch(':degree_name/getDegreeData', {method:'GET'}) //why this url?
      .then(response =>{
        return response.text()
      })
      .then(data=>{
        data = JSON.parse(data)
        console.log(data)
        console.log(data['degree_name'])
      })
      .catch(err =>{
        console.log(err)
      })


    </script>

    

    <div class="app-bottom">
      <div class="copyright">
        <p class="team_07-2022-all-rights-reserved blinker-light-aqua-squeeze-14px">
          Â© Team_07&nbsp;&nbsp; 2022&nbsp;&nbsp; All rights reserved
        </p>
      </div>
    </div>
  </div>
</body>

</html>
